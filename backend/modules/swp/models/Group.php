<?php

namespace backend\modules\swp\models;

use backend\components\Backend;
use Yii;
use yii\web\NotFoundHttpException;

class Group extends \common\models\swp\Group
{
    private $totallyDelete = null;
    public $is_require = 0;

    private static $types = [
        '0' => 'Поля',
        '100' => 'Метериалы',
    ];

    /**
     * {@inheritdoc}
     */


    public function rules()
    {
        return array_merge([
            [['is_require'], 'integer'],
            [['type'], 'in', 'range' => function () {
            return array_keys(self::$types);
        }]
        ], parent::rules());
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSwFields()
    {
        return $this->hasMany(Field::className(), ['group_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGroups()
    {
        return $this->hasMany(Group::className(), ['group_id' => 'id']);
    }

    /**
     * @return array
     */
    public static function getTypes()
    {
        return self::$types;
    }

    /**
     * @param $id
     * @return Group|null
     * @throws NotFoundHttpException
     */
    public function findGroup($id)
    {
        if ($model = self::findOne($id)) {
            return $model;
        }

        throw new NotFoundHttpException();
    }
    /**
     * @param Material|Group $group
     * @return bool
     */
    public static function createBasicGroups($group)
    {
        $model = new self();
        $model->title = 'Основное';
        $model->type = 0;
        $model->status = 100;
        $model->group_id = $group->id;
        if ($model->save()) {
            return Field::createBasicFields($model);
        }
        return false;
    }

    protected function findBasicChild() {
        return self::findOne(['group_id' => $this->id, 'status' => 100]);
    }

    /**
     * @param bool $insert
     * @return bool
     * @throws NotFoundHttpException
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function beforeSave($insert)
    {
        if ($insert) {
            $this->sort = $this->generateSortValue();
        }
        if ($this->getScenario() != self::SCENARIO_EDIT) {
            if ($this->id) {
                $model = $this->findBasicChild();
                if ($this->type == 100 && !$model) {
                    if (!Group::createBasicGroups($this)) {
                        throw new NotFoundHttpException();
                    }
                    Backend::deleteAll($this->swFields, true);
                } else if ($this->type != 100 && $model) {
                    $model->delete(true);
                }
            }
            if ($this->is_require) {
                $this->status = 100;
            } else if ($this->status == 100 && !$this->group) {
                $this->status = 10;
            }
        } else {
            $model = self::findOne($this->id);
            if ($this->group && $model->status == 100 && $this->status != $model->status) {
                return false;
            }
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function beforeDelete()
    {
        if ($this->status == 100 && !$this->totallyDelete) {
            Yii::$app->session->setFlash('danger', 'Не удалось удалить некторые элементы (Они являются обязательными).');
            return false;
        }
        Backend::deleteAll($this->groups, true);
        Backend::deleteAll($this->swFields, true);
        Backend::deleteAll($this->materials);
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $totally
     * @return false|int
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function delete($totally = false)
    {
        $this->totallyDelete = $totally;
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     * @throws NotFoundHttpException
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function afterSave($insert, $changedAttributes)
    {
        if ($insert && !$this->copy) {
            if ($this->type == 100) {
                if (!Group::createBasicGroups($this)) {
                    throw new NotFoundHttpException();
                }
            }
        }
        if ($this->copy) {
            $model = self::findOne($this->copy);
            /** @var Group $group */
            foreach ($model->groups as $group) {
                $group->toCopy($this->id);
            }
            /** @var Field $field */
            foreach ($model->swFields as $field) {
                $field->toCopy($this->id);
            }
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public static function create($title, $type, $group_id, $is_require = 0, $is_singleton = 0) {
        $group = new self();
        $group->title = $title;
        $group->type = $type;
        $group->group_id = $group_id;
        $group->is_require = $is_require;
        $group->is_singleton = $is_singleton;
        return $group->save() ? $group : null;
    }
}
