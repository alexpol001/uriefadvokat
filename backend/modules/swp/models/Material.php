<?php

namespace backend\modules\swp\models;

use backend\components\Backend;
use common\models\swp\inherit\Common as CommonModel;
use Yii;
use yii\web\NotFoundHttpException;

class Material extends \common\models\swp\Material
{
    public $fieldsData;
    private $titleLabel = 'Название';

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return array_merge(array_merge(parent::attributeLabels(), [
            'title' => $this->titleLabel
        ]));
    }

    /**
     * @param $id
     * @return Group|null
     * @throws NotFoundHttpException
     */
    public function findGroup($id)
    {
        if ($model = Group::findOne($id)) {
            return $model;
        }

        throw new NotFoundHttpException();
    }

    /**
     * @param $title
     */
    public function setLabelTitle($title)
    {
        $this->titleLabel = $title;
    }

    /**
     * @return Material|null
     */
    public function getMaterialParent()
    {
        return self::findOne($this->material_id);
    }

    protected function generateSortValue($params = null)
    {
        if ($model = $this->getMaterialParent()) {
            $params = ['group_id' => $this->group->id, 'material_id' => $model->id];
        }
        return CommonModel::generateSortValue($params); // TODO: Change the autogenerated stub
    }

    public function load($data, $formName = null)
    {
        $this->fieldsData = $data;
        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if ($insert) {
            if ($this->group->is_singleton && $this->group->materials[0]) {
                return false;
            }
            $this->sort = $this->generateSortValue();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function beforeDelete()
    {
        Backend::deleteAll($this->swFields);
        Backend::deleteAll($this->getMaterials());
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function afterSave($insert, $changedAttributes)
    {
        if ($this->scenario != self::SCENARIO_EDIT) {
            MaterialField::saveFields($this);
        }
        if ($this->copy) {
            $model = self::findOne($this->copy);

            if ($materials = $model->getMaterials()) {
                /** @var Material $material */
                foreach ($materials as $material) {
                    $material->toCopy($this->id);
                }
            }
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @param int $group
     * @return bool
     */
    public static function hasGroup($group)
    {
        $params = Yii::$app->getRequest()->getQueryParams();
        if ($params['group'] == $group) return true;
        $material = self::findOne($params['id']);
        while ($material) {
            if ($material->group->id == $group) {
                return true;
            }
            $material = $material->getMaterialParent();
        }
        return false;
    }

    public static function create($title, $group_id, $material_id = 0, $data = null) {
        $material = new self();
        $material->title = $title;
        $material->group_id = $group_id;
        $material->material_id = $material_id;
        if ($data) {
            $material->fieldsData = $data;
        }
        return $material->save() ? $material : null;
    }
}
